generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Task {
    id          String        @id @default(uuid())
    name        String
    uid         String[]
    description String
    isFinished  Boolean       @default(false) @map("is_finished")
    duration    DateTime
    updatedAt   DateTime      @default(now()) @map("updated_at")
    createdAt   DateTime      @default(now()) @map("created_at")
    project     Project       @relation(fields: [projectId], onDelete: Cascade, references: [id])
    projectId   String        @map("project_id")
    tags        TasksOnTags[]

    @@map("tasks")
}

model Project {
    id          String           @id @default(uuid())
    name        String
    description String
    uid         String[]
    isFinished  Boolean          @default(false) @map("is_finished")
    duration    DateTime
    updatedAt   DateTime         @default(now()) @map("updated_at")
    createdAt   DateTime         @default(now()) @map("created_at")
    Task        Task[]
    tags        ProjectsOnTags[]

    @@map("projects")
}

model Tag {
    id      String           @id @default(uuid())
    name    String
    Task    TasksOnTags[]
    Project ProjectsOnTags[]

    @@map("tags")
}

model TasksOnTags {
    task   Task   @relation(fields: [taskId], onDelete: Cascade, references: [id])
    taskId String
    tag    Tag    @relation(fields: [tagId], onDelete: Cascade, references: [id])
    tagId  String

    @@id([taskId, tagId])
}

model ProjectsOnTags {
    project   Project @relation(fields: [projectId], onDelete: Cascade, references: [id])
    projectId String
    tag       Tag     @relation(fields: [tagId], onDelete: Cascade, references: [id])
    tagId     String

    @@id([projectId, tagId])
}
